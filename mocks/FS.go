// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	fs "github.com/icecream78/node_shrinker/fs"
	mock "github.com/stretchr/testify/mock"
)

// FS is an autogenerated mock type for the FS type
type FS struct {
	mock.Mock
}

// Getwd provides a mock function with given fields:
func (_m *FS) Getwd() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: filepath
func (_m *FS) Remove(filepath string) error {
	ret := _m.Called(filepath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filepath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAll provides a mock function with given fields: filepath
func (_m *FS) RemoveAll(filepath string) error {
	ret := _m.Called(filepath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filepath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stat provides a mock function with given fields: filepath, recursive
func (_m *FS) Stat(filepath string, recursive bool) (*fs.FileStat, error) {
	ret := _m.Called(filepath, recursive)

	var r0 *fs.FileStat
	if rf, ok := ret.Get(0).(func(string, bool) *fs.FileStat); ok {
		r0 = rf(filepath, recursive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fs.FileStat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(filepath, recursive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
